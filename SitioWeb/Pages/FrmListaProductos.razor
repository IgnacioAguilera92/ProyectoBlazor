
@using Entidades
@inject HttpClient HttpClient
@inject Principal Principal
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/productos.css" />
<br />
<center>
    <MostrarAlerta @ref="Alert" />
    <div>
        <ul class="producto-cards">
            @if (productos is not null)
            {
                @foreach (var producto in productos)
                {
                    <li style="background-image: url('@producto.ImageUrl');">
                        <div class="producto-info">
                            <span class="title">@producto.NombreProducto</span>
                            @producto.Descripcion
                            <span class="price">@FormatearPesos(producto.Valor)</span>
                        </div>
                        <div class="page-wrapper">
                            <button style="margin-top:194px; cursor:pointer" class="add-to-cart" @onclick="() => AgregarCarrito(producto)">
                                Agregar carrito
                                <span class="quantity">
                                    @if (@producto.Stock > 0)
                                    {
                                        @producto.Stock.ToString()
                                    }
                                    else
                                    {
                                        @(0)//DEFAULT
                                    }
                                </span>
                            </button>
                        </div>
                    </li>                   
                }
            }
        </ul>
    </div>
</center>  
@code
{
    List<Productos> productos = new List<Productos>();
    Order Carrito = new Order();
    private MostrarAlerta Alert;

    protected override async Task OnInitializedAsync()
    {       
        //TEST - PRINCIPAL STOCK
        var producto1 = Principal.GetProducto(1, 20000, 2);
        productos.Add(producto1);
        var producto2 = Principal.GetProducto(2, 15000, 2);
        productos.Add(producto2);
        var producto3 = Principal.GetProducto(3, 35000, 3);
        productos.Add(producto3);
        var producto4 = Principal.GetProducto(4, 23990, 4);
        productos.Add(producto4);        

        Principal.Productos = productos;
        Principal.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Principal.OnChange -= StateHasChanged;
    }
    private string FormatearPesos(decimal valor)
    {
        var valorPesos = valor.ToString("N0", new System.Globalization.CultureInfo("es-CL"));
        return $"${valorPesos}";
    }
    public void AgregarCarrito(Productos producto)
    {
        if (producto.Stock > 0)
        {
            Principal.Carrito = Carrito;
            Principal.Carrito.Productos.Add(producto);

            Principal.AgregarCarrito(Principal.Carrito);
            producto.Stock--;
        }
        else
        {
            Alert.ShowAlert("Sin Stock", "El producto seleccionado no tiene más stock, esperar que el administrador ingrese más.", "warning");
        }
    }
}
