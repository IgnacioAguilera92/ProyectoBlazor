@page "/administracion"
@using Blazored.Modal
@using Entidades
@inject Principal Principal
@inject IJSRuntime JS
@inject Blazored.Modal.Services.IModalService ModalService

<div class="user-info">

    @* UNA VEZ LOGEADO
    <img src="img/user.svg" />
    <div>
    <a href="authentication/profile" class="username">ADMINISTRADOR</a>
    <button class="btn btn-link sign-out">Sign out</button>
    </div> *@
    @*<a class="sign-in" href="authentication/register">Registrarse</a>*@

    <MostrarAlerta @ref="Alert" />
    
    @*<a @ref="elementLimpiar" id="LimpiarAdmin" class="sign-in clear hidden" @onclick="Limpiar"><i class="fa-solid fa-trash" style="font-size:21px"></i></a>*@
    <a class="sign-in add" @onclick="AgregarProducto">TEST +</a>
    <a class="sign-in" href="login" style="width: 140px;height: 46px;">Iniciar Sesión</a>

    @* CARRITO *@
    <div class="shopping" title="Click para visualizar el carrito" @onclick="AgregarCarrito">
        <div id="cart" class="cart" data-totalitems="0">
            <i class="fas fa-shopping-cart"></i>
        </div>
        @if (carrito != null && carrito.CantidadProductos != 0)
         {
             <span class="stock-rojo">
                @carrito.CantidadProductos
             </span>
         }    
    </div>
</div>

@code {
    [Parameter] public EventCallback OnEvento { get; set; }
    //[Parameter] public EventCallback<string> OnEventoCarrito { get; set; }
    private Order carrito;
    private MostrarAlerta Alert;
    private ElementReference elementLimpiar;

    protected override async Task OnInitializedAsync()
    {
        carrito = Principal.GetCarrito();
        Principal.OnChange += OnProductosChanged; //INICIAR LA ACCIÓN
    }
    private void OnProductosChanged()
    {
        //ACCIÓN: Cargar el carrito actualizado y gatillar
        carrito = Principal.GetCarrito();
        StateHasChanged();
    }
    //NECESARIO PARA TERMINAR LA ACCIÓN
    public void Dispose()
    {
        Principal.OnChange -= OnProductosChanged; // Desuscríbete del evento
    }

    //AGREGAR AL CARRITO
    public async Task AgregarCarrito()
    {
        try
        {
            if (Principal.Carrito?.Productos?.Count > 0)
            {
                ModalService.Show<Carrito>();
            }
            else
            {
                Alert.ShowAlert("Sin productos seleccionados", $"Primero deberá añadir al carrito un producto para continuar con la compra.", "warning");
            }
        }
        catch (Exception ex)
        {
            Alert.DefaultAlert("EN CONSTRUCCIÓN", $"{ex.Message}", "warning");
        }
    }
 
    public void AgregarProducto()
    {
        var productos = Principal.GetProductos();
        if (productos?.Count > 0)
        {
            var ultimoId = productos.LastOrDefault().IdProducto + 1;

            Random random = new Random();
            int numeroRandom = random.Next(10000, 50001);
            int stockRandom = random.Next(3, 15);
            int imgRandom = random.Next(1, 4);
            var producto = Principal.GetProducto(ultimoId, numeroRandom, imgRandom, stockRandom);
            JS.InvokeVoidAsync("mostrarLimpiar", elementLimpiar);
            Principal.AgregarProducto(producto);
            
        }
    }
    public async Task Limpiar()
    {
        var productos = Principal.GetProductos();
        if (productos?.Count > 4 || Principal.Carrito?.Productos.Count > 0)
        {
            var confirmado = await Alert.ConfirmAlert("¿Estas seguro de vaciar el carrito?", "", "warning");
            if (confirmado)
            {
                if (productos?.Count > 4)
                {
                    await JS.InvokeVoidAsync("quitarLimpiar", elementLimpiar);
                    Principal.Limpiar();
                    
                    await OnEvento.InvokeAsync(null);
                    Alert.ShowAlert("Productos Eliminados!", "Se han eliminado todos los productos menos los productos principales.", "success");
                    
                }
                else if (Principal.Carrito?.Productos.Count > 0)
                {
                    await JS.InvokeVoidAsync("quitarLimpiar", elementLimpiar);
                    Principal.LimpiarCarrito();                    
                    Alert.ShowAlert("Carrito vaciado!", "Carrito se encuentra sin productos actualmente.", "success");
                    
                }
                else
                {
                    Alert.ShowAlert("Informativo", "No se ha podido eliminar los productos, los productos principales no se eliminan.", "warning");
                }
            }
        }
        else
        {
            await JS.InvokeVoidAsync("quitarLimpiar", elementLimpiar);
            Alert.ShowAlert("Informativo", "No se ha podido eliminar los productos, los productos principales no se eliminan.", "warning");
        }
    }       
}
<script>
    function mostrarLimpiar(element) {
        if (element) 
        {
             element.classList.remove('hidden');
             element.style.display = 'block';
        }
    }
    function quitarLimpiar(element) {
        if (element) 
        {
            element.classList.remove('block');
            element.style.display = 'hidden';
        }
    }
</script>
